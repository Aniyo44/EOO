the game is simple 
two players choose even or odd 
two players choose number between 
1 and 5 
win only if you win 3 rounds 
score added will be the difference between  you and your opponent if your opponent won 2 rounds and you 3 the score added to your international ranking is 1 
my goal is to create my first game on the broswer



-----
full screen button and install will both disppear when you install the app since the pwa is not standalone ti's full screen
no 404 page instead redirect it to the main page
robot.txt and error page 
--code i may use 
$:score ||score2 , randomAgain()
function randomAgain(){
    random=Math.floor(Math.random() * 5)+1
}
top tear gardient colors tbh:
bg-[radial-gradient(ellipse_at_top,_var(--tw-gradient-stops))] from-gray-300 via-fuchsia-600 to-orange-600
bg-[radial-gradient(ellipse_at_bottom,_var(--tw-gradient-stops))] from-amber-200 via-violet-600 to-sky-900

----style on desktop maybe ?
<script lang="ts">
import full_left from "../images/right-four.webp"
let show:boolean=false

function reveal(){
    show=true
}

</script>
<div class="flex justify-center items-center flex-col mt-10">
<h1>Even or Odd</h1>
{#if show}
<a href="/offline" class="text-white border-2 
bg-[radial-gradient(ellipse_at_bottom,_var(--tw-gradient-stops))]
 from-amber-200 via-violet-600 to-sky-900 border-gray-500
  p-2 rounded-full">offline</a>
<a href="/online" class="text-white border-2 
bg-[radial-gradient(ellipse_at_bottom,_var(--tw-gradient-stops))]
 from-amber-200 via-violet-600 to-sky-900 border-gray-500
  p-2 rounded-full">online</a>
{:else}
<button on:click={reveal}  class="text-white border-2 
bg-[radial-gradient(ellipse_at_top,_var(--tw-gradient-stops))]
 from-gray-300 via-fuchsia-600 to-orange-600 border-gray-500
  p-2 rounded-full">PLAY</button>
<a href="/records" style="background: var(--custom-gradient);" class="text-white border-2 
 border-gray-500
  p-1 rounded-full">records</a>
{/if}
<img src={full_left} class="w-40 h-40" />


</div>
----code of online maybee later on 
<script lang="ts">
    import { db } from "../../database/db";
let modeChoice:string=""
let numberChoice:number=1
let random:number=0
let myname:string=""
let name:string=""
let myscore:number=0
let scoredb2:number=0
let thridScreen:boolean=false
let numberScreen:boolean=false
let randomId:number=0
let winner:boolean=false
let round:number=1
let score:number=0
let score2:number=0
let gameover:boolean=false
async function fetch(){
    try {
     const data = await db.scores.get(6);
     const data2 = await db.scores.get(randomId);

    if (data) {
      myname = data.name; 
      myscore =data.score
    }
    if (data2) {
      name = data2.name; 
      scoredb2 =data2.score
    }  
  } catch (error) {
    console.error("Error fetching idea:", error);
    
  }
}
function changeMode(s:string){
    modeChoice=s
    numberScreen=true
    randomId=Math.floor(Math.random()*5)+1
    fetch()
}
function changeNumber(n:number){
    numberChoice=n
    thridScreen=true
    numberScreen=false
    random=Math.floor(Math.random() * 5)+1
    check()
    setTimeout(next, 3000); // 5000 milliseconds = 5 seconds
    if(score===3||score2===3){
        setTimeout(checkandupdate, 3000); // 5000 milliseconds = 5 seconds
   }



}
function next(){
    thridScreen=false
    numberScreen=true
    winner=false
    round++
}
function check(){
    const sum=numberChoice+random
    if((modeChoice==="even"&& sum % 2 === 0)||(modeChoice==="odd"&& sum % 2 !== 0)){
        winner=true
        score ++
    }else{
        score2 ++
    }
   
}
function restart(){
 modeChoice=""
 numberChoice=1
 random=0
 thridScreen=false
 numberScreen=false
 winner=false
 round=1
 score=0
 score2=0
 gameover=false


}

function checkandupdate(){
    let sum=0
    if (score==3){
        sum=score-score2

        myscore=myscore+sum
        console.log(myscore)
        db.scores.update(6, { score: myscore})
        
        if(scoredb2!=0){

        scoredb2=scoredb2-sum
        db.scores.update(randomId, { score: scoredb2 })
        }
    }else{
        sum=score2-score
        if(myscore!=0){
        myscore=myscore-sum
        db.scores.update(6, { score: myscore})
        }
        scoredb2=scoredb2+sum
        db.scores.update(randomId, { score: scoredb2 })
        
       
        

    }
    gameover= true;

}
</script>
<div class="flex justify-center items-center flex-col">
    <!-- the last screen the one with won or lost the game-->
    

{#if gameover}

<p>{modeChoice}</p>

<p>game over</p>
<p>{myname} :{score} vs {name}: {score2}</p>
{#if score===3}
<p>{myname} win</p>
{:else}
<p>{name} win</p>
{/if}
<p>your total score:{myscore}</p>
<p>{name} total score:{scoredb2}</p>
<button on:click={restart}>Restart</button>
<!-- thrid screen the one with the lost or won the round -->
{:else}
{#if thridScreen}
<p>Round:{round}</p>
    {#if winner}
    <p>blue side:{myname}</p>
    <p>red side: {name}</p>
    <p>{modeChoice}</p>

      <p>You're a Winner!</p>


      <div class="flex justify-center flex-row space-x-5"> 
        <div>
            <p>blue  side</p><p>{numberChoice}</p></div>
        <div>
            <p>red side</p>
            <p>{random}</p></div>
      </div>
      {#if score>0||score2>0}
      <p>blue:{score} vs red:{score2}</p>
      {/if}

    {:else}
    <p>blue side:{myname}</p>
    <p>red side: {name}</p>
    <p>{modeChoice}</p>

      <p>Sorry, You Lost.</p>

      <div class="flex justify-center flex-row"> 
        <div>
            <p>blue  side</p><p>{numberChoice}</p></div>
        <div>
            <p>red side</p>
            <p>{random}</p></div>
      </div>
      {#if score>0||score2>0}
      <p>blue:{score} vs red:{score2}</p>
      {/if}



    {/if}
    <!-- second screen the one with numbers and we keep looping over it -->
  {:else}
 {#if modeChoice.length >0 && numberScreen}  
 <p>blue side:{myname}</p>
    <p>red side: {name}</p> 
 <p>{modeChoice}</p>
 {#if score>0||score2>0}
 <p>blue:{score} vs red:{score2}</p>
 {/if}
 <p>Round:{round}</p>

 <div class="flex justify-center flex-row space-x-2">
<button on:click={()=>changeNumber(1)}>1</button>
<button on:click={()=>changeNumber(2)}>2</button>
<button on:click={()=>changeNumber(3)}>3</button>
<button on:click={()=>changeNumber(4)}>4</button>
<button on:click={()=>changeNumber(5)}>5</button>
 </div>
{:else}
<!-- the first screen where you choose even or odd it pop up once -->
<p>choose</p>
 <div class="flex flex-row space-x-2">
<button on:click={()=>changeMode("even")} >Even</button>
<button on:click={()=>changeMode("odd")} >Odd</button>
</div>
{/if}
{/if}
{/if}
</div>


-------slice
<script lang="ts">
    let red:number=0
    let blue:number=1
    let blueColor:string= 'bg-indigo-900'
    let redColor:string= 'bg-rose-700 '
    let greenColor:string= 'bg-green-700 '

    let sshow:boolean=false
    
  let color:string=""
    

    function addRed(){
        color=redColor

    }

    function addBlue(){
        color=blueColor

    }
     
  
    function show(){
        sshow=!sshow
    }
</script>
<div class="absolute top-0">
<button on:click={addBlue}>{red}</button>
<button on:click={addRed}>{blue}</button>
<button on:click={show}>show</button>

</div>



<div class="rectangle flex  border-y border-gray-500">
    <div class="border bg-gradient-to-r from-gray-200 via-gray-400 to-gray-600 border-gray-500 circle"></div>
    <div class="border bg-gradient-to-r from-gray-200 via-gray-400 to-gray-600 border-gray-500 circle2"></div>
    <div class={`${color} flex-1 border-none`}></div>
    <div class={`${blueColor} flex-1 border-none`}></div>
    <div class={`${redColor} flex-1 border-none`}></div>
    {#if sshow}
    <div class={`${blueColor} flex-1 border-none`}></div>
    <div class={`${greenColor} flex-1 border-none`}></div>

    {/if}
    


</div>
<style>
    .rectangle {
            width: 200px; /* Adjust the width as needed */
            height: 55px; /* Adjust the height as needed */
            position: relative;
            /* bg-rose-700*/
/* bg-indigo-900 */ 
       }
  
        .circle2 {

            width: 52px; /* Adjust the width as needed */
            height: 55px; /* Make it a perfect circle */
            border-radius: 50%; /* Make it a circle */
            position: absolute; /* Position absolute for precise placement */
            top: 50%; /* Center vertically */
            left: 1px; /* Center horizontally */
            transform: translate(-50%, -50%); /* Center the circle */
        }

        /* Define the styles for the circle */
        .circle {
            width: 52px; /* Adjust the width as needed */
            height: 55px; /* Make it a perfect circle */
            border-radius: 50%; /* Make it a circle */
            position: absolute; /* Position absolute for precise placement */
            top: 50%; /* Center vertically */
            left: 200px; /* Center horizontally */
            transform: translate(-50%, -50%); /* Center the circle */
        }
    .rectangle2 {
      height: 50px;
      width: 100px;
    }
   
    .circle3 {
  height: 50px;
  width: 50px;
  border-radius: 50%;
}
    </style>
    ----online
    <div class="flex justify-center flex-col items-center text-2xl mt-20 space-y-2">
  <p class="bg-fuchsia-400 p-1 rounded">play with friend</p>
  <p class="bg-green-400 p-1 rounded">play with random</p>
</div>